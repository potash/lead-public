; create schema
$[SQL_DIR]/buildings/schema <- [method:psql_schema -timecheck]

; extract buildings and generate orig_bldg_ when it is zero in input
$[SQL_DIR]/buildings/original_buildings <- buildings/original_buildings.sql, $[SQL_DIR]/input/buildings, $[SQL_DIR]/buildings/schema [method:psql]

; extract all addresses from buildings address ranges
$[SQL_DIR]/buildings/original_addresses <- buildings/original_addresses.sql, $[SQL_DIR]/buildings/original_buildings [method:psql]

; get unique representative for each address
$[SQL_DIR]/buildings/addresses <- buildings/addresses.sql, $[SQL_DIR]/buildings/original_addresses [method:psql]

; deduplicate buildings
$[SQL_DIR]/buildings/building_components <- buildings/building_components.py, $[SQL_DIR]/buildings/original_buildings, $[SQL_DIR]/buildings/original_addresses
    python $INPUT && touch $OUTPUT

; associate addresses with deduplicated buildings
$[SQL_DIR]/buildings/building_addresses <- buildings/building_addresses.sql, $[SQL_DIR]/buildings/building_components [method:psql]

; collect unique buildings
$[SQL_DIR]/buildings/buildings <- buildings/buildings.sql, $[SQL_DIR]/buildings/building_addresses [method:psql]

; deduplicate building complexes
$[SQL_DIR]/buildings/complex_components <- buildings/complex_components.py, $[SQL_DIR]/buildings/building_components
    python $INPUT && touch $OUTPUT

; associate addresses with deduplicated buildings
$[SQL_DIR]/buildings/complex_buildings <- buildings/complex_buildings.sql, $[SQL_DIR]/buildings/complex_components [method:psql]

